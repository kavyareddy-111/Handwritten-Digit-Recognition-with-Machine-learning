# -*- coding: utf-8 -*-
"""ML PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jau-oIzlgVx9bQOYUWaw8GtX03-uXcrW

**LINEAR REGRESSION**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_boston
boston=load_boston()
print(boston.data.shape)
print(boston.feature_names)
df= pd.DataFrame(boston.data)
df['Price' ]=boston.target
#input data
x = boston['data']
print(x)
y = boston.target
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size =0.2,random_state = 0)  
print("xtrain shape : ", xtrain.shape)
print("xtest shape  : ", xtest.shape)
print("ytrain shape : ", ytrain.shape)
print("ytest shape  : ", ytest.shape)
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(xtrain, ytrain)
y_pred = regressor.predict(xtest)
plt.scatter(ytest, y_pred, c = 'green')
plt.xlabel("Price: in $1000's")
plt.ylabel("Predicted value")
plt.title("True value vs predicted value : Linear Regression")
plt.show()

from sklearn.metrics import mean_squared_error, mean_absolute_error
mse = mean_squared_error(ytest, y_pred)
mae = mean_absolute_error(ytest,y_pred)
print("Mean Square Error : ", mse)
print("Mean Absolute Error : ", mae)

"""**LOGISTIC REGRESSION**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
from sklearn.model_selection import train_test_split
import seaborn as sn
df = pd.read_csv("mnist_test.csv")
print("Dataset: ",df)
y = df['label']
print("target: ",y)
df = df.drop('label',axis='columns')
print("dataset after dropping target:",df.head())
x = df.iloc[:,0:]
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=7)
print("xtrain shape: ",xtrain.shape)
print("ytrain shape: ",ytrain.shape)
print("xtest shape: ",xtest.shape)
print("ytest shape: ",ytest.shape)
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(xtrain,ytrain)
ypred1 = model.predict(xtest)
print("Accuracy of the model: ",model.score(xtest,ytest)*100)
conf1 = confusion_matrix(ytest,ypred1)
plt.subplots(figsize=(10,6))
sn.heatmap(conf1,annot=True,fmt='g')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion matrix")
plt.show()
print("Accuracy of the model: ",model.score(xtest,ytest)*100)

""" **NAIVE BAYES**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
from sklearn.model_selection import train_test_split
import seaborn as sn
df = pd.read_csv("/content/mnist_test.csv")
print("Dataset: ",df)
y = df['label']
print("target: ",y)
df = df.drop('label',axis='columns')
print("dataset after dropping target:",df.head())
x = df.iloc[:,0:]
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=7)
print("xtrain shape: ",xtrain.shape)
print("ytrain shape: ",ytrain.shape)
print("xtest shape: ",xtest.shape)
print("ytest shape: ",ytest.shape)
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(xtrain,ytrain)
ypred2 = gnb.predict(xtest)
conf2 = confusion_matrix(ytest,ypred2)
plt.subplots(figsize=(10,6))
sn.heatmap(conf2,annot=True,fmt='g')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion matrix")
plt.show()
print("Accuracy for navie bayes theorem: ",gnb.score(xtest,ytest)*100)

"""**DECISION TREE**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
from sklearn.model_selection import train_test_split
import seaborn as sn
df = pd.read_csv("mnist_test.csv")
print("Dataset: ",df)
y = df['label']
print("target: ",y)
df = df.drop('label',axis='columns')
print("dataset after dropping target:",df.head())
x = df.iloc[:,0:]
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=7)
print("xtrain shape: ",xtrain.shape)
print("ytrain shape: ",ytrain.shape)
print("xtest shape: ",xtest.shape)
print("ytest shape: ",ytest.shape)
from sklearn.tree import DecisionTreeClassifier
tr = DecisionTreeClassifier()
tr.fit(xtrain,ytrain)
ypred3 = tr.predict(xtest)
conf3 = confusion_matrix(ytest,ypred3)
print("accuracy of the model: ",tr.score(xtest,ytest)*100)
plt.subplots(figsize=(10,6))
sn.heatmap(conf3,annot=True,fmt='g')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion matrix")
plt.show()

"""**RANDOM FOREST**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
from sklearn.model_selection import train_test_split
import seaborn as sn
df = pd.read_csv("mnist_test.csv")
print("Dataset: ",df)
y = df['label']
print("target: ",y)
df = df.drop('label',axis='columns')
print("dataset after dropping target:",df.head())
x = df.iloc[:,0:]
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=7)
print("xtrain shape: ",xtrain.shape)
print("ytrain shape: ",ytrain.shape)
print("xtest shape: ",xtest.shape)
print("ytest shape: ",ytest.shape)
from sklearn.ensemble import RandomForestClassifier
rforest = RandomForestClassifier()
rforest.fit(xtrain , ytrain)
ypred4 = rforest.predict(xtest)
conf4 = confusion_matrix(ytest,ypred4)
print("accuracy of the model: ",rforest.score(xtest,ytest)*100)
plt.subplots(figsize=(10,6))
sn.heatmap(conf4,annot=True,fmt='g')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion matrix")
plt.show()

"""**SVM**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
from sklearn.model_selection import train_test_split
import seaborn as sn
df = pd.read_csv("mnist_test.csv")
print("Dataset: ",df)
y = df['label']
print("target: ",y)
df = df.drop('label',axis='columns')
print("dataset after dropping target:",df.head())
x = df.iloc[:,0:]
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=7)
print("xtrain shape: ",xtrain.shape)
print("ytrain shape: ",ytrain.shape)
print("xtest shape: ",xtest.shape)
print("ytest shape: ",ytest.shape)
from sklearn.svm import LinearSVC
svmc = LinearSVC()
svmc.fit(xtrain,ytrain)
ypred5 = svmc.predict(xtest)
conf5 = confusion_matrix(ytest,ypred5)
print("accuracy of the model: ",svmc.score(xtest,ytest)*100)
plt.subplots(figsize=(10,6))
sn.heatmap(conf5,annot=True,fmt='g')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion matrix")
plt.show()

"""**K-NEAREST NEIGHBOURS**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
from sklearn.model_selection import train_test_split
df = pd.read_csv("mnist_test.csv")
print("Dataset: ",df)
y = df['label']
print("target: ",y)
df = df.drop('label',axis='columns')
print("dataset after dropping target:",df.head())
x = df.iloc[:,0:]
xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=7)
print("xtrain shape: ",xtrain.shape)
print("ytrain shape: ",ytrain.shape)
print("xtest shape: ",xtest.shape)
print("ytest shape: ",ytest.shape)
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(xtrain,ytrain)
ypred6=knn.predict(xtest)
conf6 = confusion_matrix(ytest,ypred6)
print("accuracy of the model: ",knn.score(xtest,ytest)*100)
plt.subplots(figsize=(10,6))
sn.heatmap(conf6,annot=True,fmt='g')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion matrix")
plt.show()